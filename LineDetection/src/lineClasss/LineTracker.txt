package lineClasss;


/* Sample openCV Java Application to do some simple image thresholding
 * Author: Simon McLoughlin
 * For setting up openCV for java development in Eclipse see the link below!
 * You can use version 2.4.11 of openCV as this has the javadoc as part of the download (opencv 3 does not it appears)
 * http://docs.opencv.org/2.4/doc/tutorials/introduction/java_eclipse/java_eclipse.html#java-eclipse
 * Remember to set the PATH environment variable either in windows or locally in Eclipse, to do it in eclipse:
 * Run->Run Configurations->Java Application->Your Project->Environment tab->New
 * Variable: PATH  Value: opencv bin directory. e.g C:\Users\simon\Downloads\opencv2411\opencv\build\x64\vc12\bin
 */

import java.awt.BorderLayout;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Vector;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

import org.opencv.core.*;
import org.opencv.highgui.VideoCapture;
import org.opencv.imgproc.Imgproc;

public class LineTracker {
	static int[][] houghArray;
	static int numpoints;
	static Mat cropped;
	static Mat testMat;
	static Mat colourMat;
	static Mat roiMat;
	static Mat detectedEdges;

	public static void main(String[] args) {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);

		// Create and set up the window.
		JFrame frame = new JFrame("OpenCV");

		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		JLabel imageHolder = new JLabel();
		JLabel basicHolder = new JLabel();
		JLabel roiholder = new JLabel();
		JLabel Edgeholder = new JLabel();

		frame.getContentPane().add(imageHolder, BorderLayout.NORTH);
		frame.getContentPane().add(basicHolder, BorderLayout.SOUTH);
		frame.getContentPane().add(roiholder, BorderLayout.EAST);
		frame.getContentPane().add(Edgeholder, BorderLayout.WEST);

		// Display the window.
		frame.pack();
		frame.setVisible(true);

		// String streamAddr = "http://c-cam.uchicago.edu/mjpg/video.mjpg";
		// //try in browser to make sure its up!
		// here is a video in the opencv installation folder!
		// String streamAddr =
		// "C:\\Users\\Andrew\\Downloads\\opencv\\sources\\samples\\gpu\\768x576.avi";
		String streamAddr = "C:\\Users\\Andrew\\Downloads\\StayingInLane.avi";

		VideoCapture vcap = new VideoCapture();
		if (!vcap.open(streamAddr)) {
			System.out.println("Error opening video stream");
			return;
		}

		System.out.println("Stream Opened");
		Mat img = new Mat();
		Mat basicimg = new Mat();
		Mat out = new Mat();
		Mat basic = new Mat();
		Mat testMat = new Mat();
		Mat colourMat = new Mat();
		Mat roiMat = new Mat();
		Mat detectedEdges = new Mat();
		int i = 0;
		while (true) {
			if (!vcap.read(img)) {
				System.out.println("No frame");
			} else {

					// Imgproc.GaussianBlur(img, testMat, new Size(3, 2), 0);

					Imgproc.cvtColor(img, detectedEdges, Imgproc.ADAPTIVE_THRESH_GAUSSIAN_C);
					Imgproc.cvtColor(testMat, colourMat, Imgproc.COLOR_GRAY2BGR);


					//call method canny

					canny(img, testMat, roiMat, detectedEdges);

					// openCV version
					// Imgproc.threshold(img, img, 100, 255,
					// Imgproc.THRESH_BINARY);
					// convert to colour so we can put text into the image using
					// whatever colour we want!


					// Imgproc.cvtColor(img, detectedEdges,
					// Imgproc.THRESH_MASK);
					// Imgproc.cvtColor(detectedEdges, detectedEdges,
					// Imgproc.COLOR_GRAY2BGR);

					// img.copyTo(detectedEdges);



					BufferedImage jimg = Mat2BufferedImage(img);
					BufferedImage Bimg = Mat2BufferedImage(testMat);
					BufferedImage Cimg = Mat2BufferedImage(roiMat);
					BufferedImage Eimg = Mat2BufferedImage(detectedEdges);

					basicHolder.setIcon(new ImageIcon(Bimg));
					imageHolder.setIcon(new ImageIcon(jimg));
					roiholder.setIcon(new ImageIcon(Cimg));
					Edgeholder.setIcon(new ImageIcon(Eimg));
					//canny(img, testMat, roiMat, detectedEdges);

					frame.pack();

					// addPoints(jimg,img);

				}

		}
	}

	public static BufferedImage Mat2BufferedImage(Mat m) {
		// source:
		// http://answers.opencv.org/question/10344/opencv-java-load-image-to-gui/
		// Fastest code
		// The output can be assigned either to a BufferedImage or to an Image

		int type = BufferedImage.TYPE_BYTE_GRAY;
		if (m.channels() > 1) {
			type = BufferedImage.TYPE_3BYTE_BGR;
		}
		int bufferSize = m.channels() * m.cols() * m.rows();
		byte[] b = new byte[bufferSize];
		m.get(0, 0, b); // get all the pixels
		BufferedImage image = new BufferedImage(m.cols(), m.rows(), type);
		final byte[] targetPixels = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();
		System.arraycopy(b, 0, targetPixels, 0, b.length);
		return image;

	}

	// public static void threshold(Mat img, int t)
	// {
	// /* threshold the image (img), note here that we need to do an
	// * & with 0xff. this is because Java uses signed two's complement
	// * types. The & operation will give us the pixel in the range we are
	// * used to, 0..255
	// */
	// byte data[] = new byte[img.rows()*img.cols()*img.channels()];
	// img.get(0, 0, data);
	// for (int i=0;i<data.length;i++)
	// {
	// int unsigned = (data[i] & 0xff);
	// if (unsigned > t)
	// data[i] = (byte)255;
	// else
	// data[i] = (byte)0;
	//
	// }
	//
	//// int lowThreshold = 60;
	//// int ratio = 3;
	//// Imgproc.Canny(img, img, lowThreshold, lowThreshold * ratio);
	//
	//
	//
	//
	// img.put(0, 0, data);
	// }

	private static void canny(Mat img, Mat testMat, Mat roiMat, Mat detectedEdges) {
		// init
		Mat grayImage = new Mat();

		// convert to grayscale
		// Imgproc.cvtColor(img, grayImage, Imgproc.COLOR_BGR2GRAY);

		// reduce noise with a 3x3 kernel
		// Imgproc.blur(grayImage, detectedEdges, new Size(250, 250));

		// canny detector, with ratio of lower:upper threshold of 3:1
		Imgproc.blur(img, testMat, new Size(3, 3));

		Imgproc.Canny(testMat, testMat, 200, 192 );

		Imgproc.blur(img, roiMat, new Size(3, 3));

		drawLines(testMat, img, roiMat, detectedEdges);
		// roi(img,roiMat);

	}

	// private static void roi(Mat img,)
	// {
	//
	//
	// }
	//
	private static void drawLines(Mat testMat, Mat img, Mat roiMat, Mat detectedEdges) {

		Imgproc.Canny(testMat, roiMat, 200, 192);

		// Point pt1 = new Point(600,testMat.cols());
		// Point pt2 = new Point(testMat.rows(),20);
		// Core.rectangle(roiMat, pt1, pt2, new Scalar(255,0,0, 0),5);
		//
		//
		//
		// Core.rectangle(roiMat,
		// new Point(600,testMat.cols()),
		// new Point(testMat.rows(),20),
		// new Scalar(255));
		//
		// Core.rectangle(roiMat,
		// new Point(400,testMat.cols()),
		// new Point(testMat.rows(),21),
		// new Scalar(150));

		//Blur the Image
		Imgproc.blur(roiMat, roiMat, new Size(1, 1));

		//Use canny
		Imgproc.Canny(roiMat, roiMat, 3, 3);

		ArrayList<MatOfPoint> contours = new ArrayList<MatOfPoint>();
		Mat NewMat = new Mat();

		Imgproc.findContours(roiMat, contours, NewMat, Imgproc.RETR_TREE, Imgproc.CHAIN_APPROX_SIMPLE);
		//roiMat.adjustROI(50, -90, 20, -20);

		for (int x = 0; x < contours.size(); x++)
		{
			Imgproc.drawContours(detectedEdges, contours, x, new Scalar(255, 150, 120), 1);
		}
		// Imgproc.drawContours( roiMat, contours, 5, color, 2, 8, roiMat,5,
		// null);
		// Imgproc.findContours(roiMat,
		// contours, new Mat(), Imgproc.RETR_EXTERNAL,
		// Imgproc.CHAIN_APPROX_SIMPLE);
		//
		// Imgproc.cvtColor(roiMat, roiMat, Imgproc.COLOR_GRAY2BGR);

		Mat test = new Mat();

		// Rect roi = new Rect(500, 60, 110, 110);

		// Imgproc.HoughLines(img, test, 1, Math.PI/250, 15);
		// Rect roi = new Rect(0, 0, testMat.cols() - 1, testMat.rows() - 1);
		// Mat cropped = new Mat(img, roi);

		// Point pt1 = new Point(600,testMat.cols());
		// Point pt2 = new Point(testMat.rows(),20);
		// //Core.rectangle(img, pt1, pt2, new Scalar(255,0,0, 0),5);
		// //Rect roi = new Rect(0, 0, img.cols() - 1, img.rows() - 1);

		// Core.rectangle(img,);
		// cropped = new Mat(testMat, roi);
		Imgproc.HoughLinesP(testMat, test, 1, Math.PI / 250, 15, 26, 10);

		// Imgproc.HoughLines(testMat, test, Math.PI/150, 14, 56);

		for (int x = 0; x < test.rows(); x++) {
			double[] vec = test.get(x, 0);
			double x1 = vec[0], y1 = vec[1], x2 = vec[2], y2 = vec[3];
			Point start = new Point(x1, y1);
			Point end = new Point(x2, y2);
			// double dx = x1 - x2;
			// double dy = y1 - y2;

			Core.line(img, start, end, new Scalar(134, 190, 56, 120), 5);// (img,
																			// start,
																			// end,
																			// new
																			// Scalar(255,0,0,
																			// 0),5);

		}
	}

	// public static void addPoints(BufferedImage jimg,Mat img) {
	//
	//
	// // Now find edge points and update the hough array
	// for (int x = 0; x < img.cols(); x++) {
	// for (int y = 0; y < img.rows(); y++) {
	// // Find non-black pixels
	// if ((jimg.getRGB(x, y) & 0xff) != 0) {
	// // System.out.println("X = " + x +" Y = " + y);
	//
	// jimg.setRGB(x, y, 255);
	//
	////
	//// Point pt1 = new Point(0, 100);
	//// Point pt2 = new Point(95, 95);
	//// Core.line(img, pt1, pt2, new Scalar(0,255,0), 9);
	// }
	//
	// }
	// }

	// //step 1
	// Mat colorEdges = new Mat();
	// img.copyTo(colorEdges);
	// Imgproc.cvtColor(colorEdges, colorEdges, Imgproc.COLOR_GRAY2BGR);
	// //step 2
	// Scalar newColor = new Scalar(255,0,0); //this will be green
	// colorEdges.setTo(newColor, img);
	// //step 3
	// colorEdges.copyTo(img, colorEdges); //this replaces your current cvtColor
	// line, placing your Canny edge lines on the original image
	//

}
